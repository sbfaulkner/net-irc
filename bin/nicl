#!/usr/bin/env ruby
#
# nicl Copyright Â© 2007-2016 S. Brent Faulkner
# Created by: S. Brent Faulkner (sbfaulkner@gmail.com) 2007-08-29
#

require 'bundler/setup'
require 'net/irc'

require 'net/irc/nicl/ansi'
require 'net/irc/nicl/prompt'

include Net::IRC::Nicl::Ansi
include Net::IRC::Nicl::Prompt

Net::IRC.logger.level = Logger::DEBUG
Net::IRC.logger.datetime_format = '%Y/%m/%d %H:%M:%S'

Thread.abort_on_exception = true

server, port, user, full_name, password = ARGV

server ||= 'irc.freenode.net'
port = port ? port.to_i : 6667
full_name ||= user
full_name ||= prompt('Full name: ')
user ||= prompt('User: ')
password ||= prompt('Password: ', true)

Net::IRC.start user, password, full_name, server, port do |irc|
  Thread.new do
    irc.each do |message|
      case message
      # TODO: required = VERSION, PING, CLIENTINFO, ACTION
      # TODO: handle internally... probably true for most CTCP requests
      when Net::IRC::CTCPVersion
        irc.ctcp_version(
          message.source,
          'net-irc simple-client',
          Net::IRC::VERSION,
          PLATFORM,
          'http://www.github.com/sbfaulkner/net-irc'
        )

      when Net::IRC::CTCPAction
        puts "#{highlight(message.source, BOLD, fg(YELLOW))} "\
              "#{highlight(message.target, BOLD, fg(GREEN))}: #{highlight(message.text, BOLD)}"

      when Net::IRC::CTCPPing
        irc.ctcp_ping(message.source, message.arg)

      when Net::IRC::CTCPTime
        irc.ctcp_time(message.source)

      when Net::IRC::CTCP
        puts highlight("Unhandled CTCP REQUEST: #{message.class} (#{message.keyword})", BOLD, fg(RED))

      when Net::IRC::Join
        puts "#{highlight(message.prefix.nickname, BOLD, fg(YELLOW))} "\
              "joined #{highlight(message.channels.first, BOLD, fg(GREEN))}."

      when Net::IRC::Part
        if message.text && !message.text.empty?
          puts "#{highlight(message.prefix.nickname, BOLD, fg(YELLOW))} "\
                "has left #{highlight(message.channels.first, BOLD, fg(GREEN))} (#{message.text})."
        else
          puts "#{highlight(message.prefix.nickname, BOLD, fg(YELLOW))} "\
                "has left #{highlight(message.channels.first, BOLD, fg(GREEN))}."
        end

      when Net::IRC::Mode
        # TODO: handle internally
        puts highlight("#{message.channel} mode changed #{message.modes}", fg(BLUE))

      when Net::IRC::Quit
        if message.text && !message.text.empty?
          puts "#{highlight(message.prefix.nickname, BOLD, fg(YELLOW))} has quit (#{message.text})."
        else
          puts "#{highlight(message.prefix.nickname, BOLD, fg(YELLOW))} has quit."
        end

      when Net::IRC::Notice
        puts highlight(message.text, fg(CYAN))

      when Net::IRC::Privmsg
        puts "#{highlight(message.prefix.nickname, BOLD, fg(YELLOW))} "\
              "#{highlight(message.target, BOLD, fg(GREEN))}: #{highlight(message.text, BOLD)}"

      when Net::IRC::Nick
        puts "#{highlight(message.prefix.nickname, BOLD)} is now #{highlight(message.nickname, BOLD, fg(YELLOW))}"

      when Net::IRC::ErrNicknameinuse
        irc.nick message.nickname.sub(/\d*$/) { |n| n.to_i + 1 }

      when Net::IRC::ErrNeedreggednick
        irc.privmsg('nickserv', 'help')

      when Net::IRC::RplLoggedin,
           Net::IRC::RplLoggedout
        puts highlight(message.text, fg(GREEN))

      when Net::IRC::Error
        puts highlight("Unhandled ERROR: #{message.class} (#{message.command})", BOLD, fg(RED))

      when Net::IRC::RplWelcome,
           Net::IRC::RplYourhost, Net::IRC::RplCreated
        puts message.text

      when Net::IRC::RplLuserclient,
           Net::IRC::RplLuserme,
           Net::IRC::RplLocalusers,
           Net::IRC::RplGlobalusers,
           Net::IRC::RplStatsconn
        puts highlight(message.text, fg(BLUE))

      when Net::IRC::RplLuserop,
           Net::IRC::RplLuserunknown,
           Net::IRC::RplLuserchannels
        puts highlight("#{message.count} #{message.text}", fg(BLUE))

      when Net::IRC::RplIsupport
        # TODO: handle internally... parse into capabilities collection

      when Net::IRC::RplMyinfo
      when Net::IRC::RplMotdstart

      when Net::IRC::RplTopic
        # TODO: handle internally
        puts "#{highlight(message.channel, BOLD, fg(GREEN))}: #{message.text}"

      when Net::IRC::RplTopicwhotime
        # TODO: handle internally
        puts "#{highlight(message.channel, BOLD, fg(GREEN))}: "\
              "#{message.nickname} #{message.time.strftime('%Y/%m/%d %H:%M:%S')}"

      when Net::IRC::RplNamreply
        # TODO: handle internally
        puts "#{highlight(message.channel, BOLD, fg(GREEN))}: #{message.names.join(', ')}"

      when Net::IRC::RplEndofnames
        # TODO: handle internally

      when Net::IRC::RplMotd
        puts message.text.sub(/^- /, '')

      when Net::IRC::RplEndofmotd
        puts ''

      when Net::IRC::Reply
        puts highlight("Unhandled REPLY: #{message.class} (#{message.command})", BOLD, fg(RED))

      when Net::IRC::Message
        puts highlight("Unhandled MESSAGE: #{message.class} (#{message.command})", BOLD, fg(RED))

      else
        raise IOError, "unknown class #{message.class}"

      end
    end
  end

  while line = STDIN.readline
    scanner = StringScanner.new(line.chomp)
    if command = scanner.scan(%r{/(\S+)\s*}) && scanner[1]
      case command.upcase
      when 'JOIN'
        # TODO: validate arguments... support for password... etc.
        irc.join scanner.rest

      when 'MSG'
        # TODO: validate arguments... support for password... etc.
        scanner.scan(/(\S+)\s+(.*)/)
        irc.privmsg(scanner[1], scanner[2])
      when 'PART'
        # TODO: validate arguments... support for password... etc.
        irc.part scanner.rest

      when 'QUIT'
        break
      else
        puts highlight("Unknown COMMAND: #{command}", BOLD, fg(RED))
      end
    elsif scanner.scan(/(\S+)\s+(.*)/)
      irc.privmsg(scanner[1], scanner[2])
      # else
      # TODO: error? need a concept of a current room
    end
  end
end
